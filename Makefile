PYTHON_VERSION ?= 3.12
PACKAGE_NAME ?= $(shell python -c "import configparser; cfg = configparser.ConfigParser(); cfg.read('setup.cfg'); print(cfg['metadata']['name'])")
CONDA_ENV_NAME ?= ${PACKAGE_NAME}_py${PYTHON_VERSION}
REPO_ROOT ?= $(dir $(abspath $(lastword $(MAKEFILE_LIST))))
QC_DIRS ?= ${REPO_ROOT}src/ ${REPO_ROOT}tests/ ${REPO_ROOT}docs/
INSTALL_EXTRAS ?= [dev] # [build] [dev] [qc] [test] [doc]

SAFETY_API_KEY ?= $(shell grep SAFETY_API_KEY .env | cut -d '=' -f2) # Your safety API key. For local dev, you can simply add SAFETY_API_KEY to your environment via a .env file or explicit export.
SAFETY_KEY_FLAG = $(if $(SAFETY_API_KEY),--key $(SAFETY_API_KEY),)
CHECKOUT_SHARED ?= $(shell grep CHECKOUT_SHARED .env | cut -d '=' -f2)
ORG_READ_TOKEN ?= $(shell grep ORG_READ_TOKEN .env | cut -d '=' -f2)

DOC_BUILD_DIR ?= docs/_build/
DIST_DIR ?= dist/

ACT_RUN_EVENT ?= workflow_dispatch
CI_CD_FILE_NAME ?= CI_CD.yml
MATRIX_OS ?= ubuntu-latest
MATRIX_PYTHON_VERSION ?=
TEST_OR_PROD ?= dev

EXCLUDED_TARGETS_FROM_LIST ?= # Just excludes from list-makes. Doesn't remove from available targets.
.DEFAULT_GOAL = list-makes
.PHONY: build-doc build-env build-package clean delete-all-branches delete-local-branch delete-remote-branch e2e format full full-qc full-test install integration lint list-makes remove-env run-act security typecheck unit update-shared

list-makes: # Print make targets, optionally excluding certain ones.
	@for file in $(MAKEFILE_LIST); do \
		echo "Makefile targets from $$file:"; \
		grep -i "^[a-zA-Z][a-zA-Z0-9_ \.\-]*: .*[#].*" $$file | sort | sed 's/:.*#/ : /g' | { \
			if [ -n "$(EXCLUDED_TARGETS_FROM_LIST)" ]; then grep -vE "($(EXCLUDED_TARGETS_FROM_LIST))"; else cat; fi; \
		} | column -t -s:; \
		echo ""; \
	done

build-env: # Build the dev env. You may want to add other extras here like mysqlclient etc. This does not install the package under development.
	conda create -n ${CONDA_ENV_NAME} python=${PYTHON_VERSION} --yes

install: # Install this package in local editable mode.
	python -m pip install --upgrade pip setuptools
	python -m pip install -e ${REPO_ROOT}${INSTALL_EXTRAS} -c shared/constraints.txt

full: # Run a "full" install, QC, test, and build. You'll need to have the environment already activated even though it rebuilds it.
	$(MAKE) build-env install INSTALL_EXTRAS=[dev] full-qc full-test build-doc build-package

full-qc: # Run all the QC.
	$(MAKE) lint security typecheck

full-test: # Run all the tests.
	$(MAKE) unit integration e2e

clean: # Clear caches and coverage reports, etc.
	@cd ${REPO_ROOT} && rm -rf dist .coverage* cov_report* **/__pycache__ .pytest_cache .pytype src/${PACKAGE_NAME}.egg-info *_test_report.xml

format: # Clean up code.
	black --config ${REPO_ROOT}shared/pyproject.toml ${QC_DIRS}
	isort -p ${PACKAGE_NAME} --settings-path ${REPO_ROOT}shared/pyproject.toml ${QC_DIRS}

lint: # Check style and formatting. Should agree with format and only catch what format can't fix, like line length, missing docstrings, etc.
	black --config ${REPO_ROOT}shared/pyproject.toml --check ${QC_DIRS}
	isort -p ${PACKAGE_NAME} --settings-path ${REPO_ROOT}shared/pyproject.toml --check-only ${QC_DIRS}
	flake8 --config ${REPO_ROOT}shared/.flake8 ${QC_DIRS}

security: # Check for vulnerabilities.
	bandit -r ${REPO_ROOT}src
	safety ${SAFETY_KEY_FLAG} scan
	safety ${SAFETY_KEY_FLAG} scan --target shared
	pip list | jake ddt --whitelist=shared/jake_whitelist.json
	conda list --json | jake ddt --type=CONDA_JSON --whitelist=shared/jake_whitelist.json

typecheck: # Check typing.
	pytype --config=${REPO_ROOT}shared/pytype.cfg -- ${QC_DIRS}

run-test: # Base call to pytest. (Export MARKER to specify the test type.)
	pytest -m ${MARKER} ${REPO_ROOT} --rootdir ${REPO_ROOT} -c ${REPO_ROOT}pyproject.toml

unit: # Run unit tests.
	$(MAKE) run-test MARKER=unit

integration: #Run integration tests.
	$(MAKE) run-test MARKER=integration

e2e: # Run end-to-end tests.
	$(MAKE) run-test MARKER=e2e

build-doc: # Build Sphinx docs, from autogenerated API docs and human-written RST files.
	@if [ -d "${REPO_ROOT}${DOC_BUILD_DIR}" ]; then rm -r ${REPO_ROOT}${DOC_BUILD_DIR}; fi
	mkdir ${REPO_ROOT}${DOC_BUILD_DIR}
	sphinx-apidoc -o ${REPO_ROOT}docs ${REPO_ROOT}src/${PACKAGE_NAME} -f
	sphinx-build ${REPO_ROOT}docs ${REPO_ROOT}${DOC_BUILD_DIR}

build-package: # Build the package to deploy.
	rm -rf ${REPO_ROOT}${DIST_DIR}
	python -m build ${REPO_ROOT}
	twine check ${DIST_DIR}/*

set-CI-CD-file: # Override to update the CI-CD file for run-act, e.g. to use local shared workflows instead of via GitHub URLs.
	echo "No changes made to CI-CD file."
	# e.g.
	# perl -pi -e 's|crickets-and-comb/shared/.github/workflows/CI\.yml\@main|./shared/.github/workflows/CI.yml|g' .github/workflows/CI_CD_act.yml

run-act: # Run the CI-CD workflow.
	$(eval MATRIX_OS_FLAG := $(if $(MATRIX_OS),--matrix os:${MATRIX_OS},))
	$(eval MATRIX_PYTHON_VERSION_FLAG := $(if $(MATRIX_PYTHON_VERSION),--matrix python-version:${MATRIX_PYTHON_VERSION},))
	$(eval PYTHON_BUILD_VERSION := $(if $(MATRIX_PYTHON_VERSION),${MATRIX_PYTHON_VERSION},${PYTHON_VERSION}))

	cp .github/workflows/${CI_CD_FILE_NAME} .github/workflows/CI_CD_act.yml
	$(MAKE) set-CI-CD-file

	act ${ACT_RUN_EVENT} -W .github/workflows/CI_CD_act.yml --defaultbranch main ${MATRIX_OS_FLAG} ${MATRIX_PYTHON_VERSION_FLAG} \
		-s CHECKOUT_SHARED=${CHECKOUT_SHARED} -s ORG_READ_TOKEN=${ORG_READ_TOKEN} -s SAFETY_API_KEY=${SAFETY_API_KEY} \
		--input TEST_OR_PROD=${TEST_OR_PROD} --input PYTHON_BUILD_VERSION=${PYTHON_BUILD_VERSION}