name: Makefile Test Install

on:
  workflow_call:
    inputs:
      RELEASE_VERSION:
        description: 'Which version to test? If empty, will use version checked out in repo.'
        type: string
        required: false
      TEST_OR_PROD:
        description: 'Which published version to test? PyPi (prod) or TestPyPi (test)?'
        type: string
        required: true
    secrets:
      CHECKOUT_SHARED:
        required: true

defaults:
  run:
    shell: bash -el {0}

env:
  CONDA_VERSION: latest

jobs:
  validate-and-set-inputs:
    name: Validate and Set Inputs
    runs-on: ubuntu-latest
    outputs:
      RELEASE_VERSION: ${{ steps.validate-release-version.outputs.RELEASE_VERSION }}
      TEST_OR_PROD: ${{ steps.validate-test.outputs.TEST_OR_PROD }}

    steps:
      - name: Validate and set RELEASE_VERSION
        id: validate-release-version
        env:
          RELEASE_VERSION: ${{ inputs.RELEASE_VERSION }}
        run: |
          if [[ -z "$RELEASE_VERSION" ]]; then
            echo "RELEASE_VERSION is not set, using version from setup.cfg."
            echo "RELEASE_VERSION=$(python -c 'import configparser; cfg = configparser.ConfigParser(); cfg.read("setup.cfg"); print(cfg["metadata"]["version"])')" >> $GITHUB_OUTPUT
          else
            echo "Using RELEASE_VERSION: $RELEASE_VERSION"
            echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Validate and set TEST_OR_PROD
        id: validate-test
        env:
          TEST_OR_PROD: ${{ inputs.TEST_OR_PROD }}
        run: |
          if [[ -z "$TEST_OR_PROD" ]]; then
            echo "TEST_OR_PROD is required."
            exit 1
          fi
          echo "Using TEST_OR_PROD: $TEST_OR_PROD"
          echo "TEST_OR_PROD=$TEST_OR_PROD" >> $GITHUB_OUTPUT
  
  test-published-package:
    needs: validate-and-set-inputs
    name: Test Published Package on (Test)PyPi
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.11, 3.12, 3.13]

    steps:
      - name: Set Default Branch
        run: |
          git config --global init.defaultBranch main

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.CHECKOUT_SHARED }}

      - name: Setup Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-activate-base: false
          miniconda-version: ${{ env.CONDA_VERSION }}
          python-version: ${{ matrix.python-version }}

      - name: Build Environment
        run: |
          ENV_NAME=test_publish_to_pypi
          echo "ENV_NAME=${ENV_NAME}" >> $GITHUB_ENV
          conda create -n ${ENV_NAME} python=${{ matrix.python-version }} -y

      - name: Install Package
        run: |
          PACKAGE_NAME=$(python -c "import configparser; cfg = configparser.ConfigParser(); cfg.read('setup.cfg'); print(cfg['metadata']['name'])")
          echo "PACKAGE_NAME=${PACKAGE_NAME}" >> $GITHUB_ENV
          PACKAGE_NAME_HYPHEN=$(echo ${PACKAGE_NAME} | tr '_' '-')

          # CVE-2018-20225 ignored here. --extra-index-url usage is secure in this context.
          TEST_PYPI_FLAG=""
          if [[ "${{ needs.validate-and-set-inputs.outputs.TEST_OR_PROD }}" == "test" ]]; then
            TEST_PYPI_FLAG="-i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/"
          fi

          conda run -n ${{ env.ENV_NAME }} pip install ${TEST_PYPI_FLAG} ${PACKAGE_NAME_HYPHEN}==${{ needs.validate-and-set-inputs.outputs.RELEASE_VERSION }}

      - name: Run Tests
        run: |
          conda activate ${{ env.ENV_NAME }}
          python -c "import ${{ env.PACKAGE_NAME }}"
          pip install pytest
          if [[ "${{ matrix.os }}" == *"windows"* ]]; then
            pytest tests\\
          else
            pytest tests/
          fi